<?xml version="1.0"?>
<!--
  Copyright (C) 2018-2021 LEIDOS.

  Licensed under the Apache License, Version 2.0 (the "License"); you may not
  use this file except in compliance with the License. You may obtain a copy of
  the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  License for the specific language governing permissions and limitations under
  the License.
-->
<!--
	drivers.launch

This file is used for vehicle configurations. The arguments from carma.launch should pass on to carma_src.launch, which should then pass those arguments to this file. The arguments in the carma.launch file will override all of the default values of the arguments being passed, so you should be making changes to the carma.launch to configure it to your vehicle. 

If not using simulated drivers they are activated if the respective mock arguments being passed in are false. These lines below activate the respective actual driver if the respective mock argument being passed is false.

-->

<launch>
  
  <!-- Shutdown node to shutdown driver node with fatal message -->
  <!-- <node pkg="driver_shutdown" type="driver_shutdown" name="$(anon driver_shutdown)" required="true"/> -->

  <!-- Vehicle calibration directory -->
  <arg name="vehicle_calibration_dir" default="/opt/carma/vehicle/calibration" doc="Folder containing vehicle calibration directories."/>

  <!-- Mock drivers -->
  <arg name="mock_drivers"        default="" doc="List of driver node base names which will be launched as mock drivers."/>

  <arg name="mock_can"            value="$(eval 'can' in arg('mock_drivers').split())"/>
  <arg name="mock_comms"          value="$(eval 'comms' in arg('mock_drivers').split())"/>
  <arg name="mock_controller"     value="$(eval 'controller' in arg('mock_drivers').split())"/>
  <arg name="mock_gnss"           value="$(eval 'gnss' in arg('mock_drivers').split())"/>
  <arg name="mock_radar"          value="$(eval 'radar' in arg('mock_drivers').split())"/>
  <arg name="mock_imu"            value="$(eval 'imu' in arg('mock_drivers').split())"/>
  <arg name="mock_lidar"          value="$(eval 'lidar' in arg('mock_drivers').split())"/>
  <arg name="mock_camera"         value="$(eval 'camera' in arg('mock_drivers').split())"/>
  <arg name="mock_roadway_sensor" value="$(eval 'roadway_sensor' in arg('mock_drivers').split())"/>
  <arg name="mock_lightbar"       value="$(eval 'lightbar' in arg('mock_drivers').split())"/>

  <!-- Specific Drivers -->
  <arg name="drivers" default="gstreamer_camera ouster_lidar inertiallabs_gnss dataspeed_can dataspeed_controller"
    doc="Desired real drivers to launch specified by package name. Mock drivers will take precedence."/>

  <arg name="gstreamer_camera"      value="$(eval ('gstreamer_camera' in arg('drivers').split()) and not arg('mock_camera'))"/>
  <arg name="ouster_lidar"          value="$(eval ('ouster_lidar' in arg('drivers').split()) and not arg('mock_lidar'))"/>
  <arg name="inertiallabs_gnss"     value="$(eval ('inertiallabs_gnss' in arg('drivers').split()) and not arg('mock_gnss'))"/>
  <arg name="dataspeed_can"         value="$(eval ('dataspeed_can' in arg('drivers').split()) and not arg('mock_can'))"/>
  <arg name="dataspeed_controller"  value="$(eval ('dataspeed_controller' in arg('drivers').split()) and not arg('mock_controller'))"/>

  <include if="$(arg gstreamer_camera)" file="$(find gscam_driver)/launch/left_imx390.launch">
  </include>
  <!-- <include if="$(arg gstreamer_camera)" file="$(find gscam_driver)/launch/right_imx390.launch">
  </include> -->

  <include if="$(arg ouster_lidar)" file="$(find ouster_ros)/ouster.launch">
    <arg name="sensor_hostname" value="10.5.5.53"/>
    <arg name="udp_dest" value="10.5.5.1"/>
    <arg name="metadata" value="/opt/carma/vehicle/calibration/ouster/OS1-64U.json"/>
    <arg name="viz" value="false"/>
  </include>

  <include if="$(arg inertiallabs_gnss)" file="$(find inertiallabs_ins)/launch/ins.launch">
  </include>

  <include if="$(arg dataspeed_can)" file="$(find dbw_mkz_can)/launch/dbw.launch">
    <arg name="frame_id" value="base_link"/>
    <arg name="load_urdf" value="false"/>
  </include>

  <include if="$(arg dataspeed_controller)" file="$(find dataspeed_ulc_can)/launch/ulc.launch">
  </include>

</launch>
